stages:
  - build
  - dockerize
  - deploy

image: node:lts-alpine
services:
  - docker:dind

variables:
  KUBE_CONTEXT: YasharHTML_STUD/nestjs_banking:kube-agent

gateway-build:
  stage: build
  script:
    - yarn
    - yarn build gateway
  artifacts:
    paths:
      - dist/apps/gateway

customer-build:
  stage: build
  script:
    - yarn
    - yarn build customer
  artifacts:
    paths:
      - dist/apps/customer

auth-build:
  stage: build
  script:
    - yarn
    - yarn build auth
  artifacts:
    paths:
      - dist/apps/auth

gateway-dockerize:
  image: docker:latest
  stage: dockerize
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/gateway:latest --build-arg microservice=gateway .
    - docker push $CI_REGISTRY_IMAGE/gateway:latest

customer-dockerize:
  image: docker:latest
  stage: dockerize
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/customer:latest --build-arg microservice=customer .
    - docker push $CI_REGISTRY_IMAGE/customer:latest

auth-dockerize:
  image: docker:latest
  stage: dockerize
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/auth:latest --build-arg microservice=auth .
    - docker push $CI_REGISTRY_IMAGE/auth:latest

gateway-deploy:
  image: bitnami/kubectl:latest
  script:
    - kubectl config get-contexts
    - kubectl config use-context "$KUBE_CONTEXT"
    - kubectl apply -f k8s/gateway/deployment.yaml -f k8s/gateway/svc.yaml
